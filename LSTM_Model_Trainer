import argparse
import json
from model_trainer import ModelTrainer


def parse_args():
    parser = argparse.ArgumentParser(description="Train a model using ModelTrainer")
    parser.add_argument("--dataset", required=True, help="Path to CSV dataset")
    parser.add_argument("--target", required=True, help="Target column name")
    parser.add_argument(
        "--model",
        choices=[
            "linear_regression",
            "random_forest_regressor",
            "random_forest_classifier",
            "svm_regressor",
            "svm_classifier",
            "lstm",
            "ppo",
        ],
        default="linear_regression",
        help="Model type to train",
    )
    parser.add_argument("--env", default="CartPole-v1", help="Gym environment for PPO")
    parser.add_argument("--timesteps", type=int, default=10000, help="Timesteps for PPO training")
    parser.add_argument("--lstm-units", type=int, default=50, help="Number of LSTM units")
    parser.add_argument(
        "--sequence-length",
        type=int,
        default=10,
        help="Input sequence length for LSTM",
    )
    return parser.parse_args()


def main():
    args = parse_args()
    hyperparameters = {}
    if args.model == "ppo":
        hyperparameters["env_name"] = args.env
        hyperparameters["timesteps"] = args.timesteps
    elif args.model == "lstm":
        hyperparameters["lstm_units"] = args.lstm_units
        hyperparameters["num_time_steps"] = args.sequence_length

    trainer = ModelTrainer(args.dataset, args.target, args.model, hyperparameters)
    metrics = trainer.run()
    print(json.dumps(metrics, indent=2))


if __name__ == "__main__":
    main()

